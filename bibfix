#!/usr/bin/perl -w
# NOTE: This has basically been replaced by "bibformat".  
# 
# This program "fixes" a .bib file.  Cleans the formatting and sorts.
# It depends on "bibclean" and "bibsort".
#
# Usage: bibfix <input file> <output file>
# 
# Since all of the input happens before any output, it's OK for the source and
# destination file to be the same.  In this case a backup is automatically
# made, just to be sure.

use strict;
use FileHandle;
use IPC::Open2;

sub go {
	my $fileIn = shift;
	my $fileOut = shift;


	# Make a copy of the original for safekeeping.
	if($fileIn eq $fileOut) {
		system("cp $fileIn $fileIn.bak") == 0  || die "Could not make backup of $fileIn.";
	}

	# Make sure bibclean can parse the input file.  Otherwise things will get
	# confused later.
	my $code = system("bibclean $fileIn --no-check-values > /dev/null") >> 8;
	if($code != 0) {
		# If bibclean fails, it will send error messages to stderr, so the user
		# will know what went wrong.
		exit(1);
	}

	# Get everything from the .bib files.  Use max-width=0 to keep bibclean from
	# wrapping anything; this is important to keep the @String definitions on a
	# single line to be sorted later.
	open(IN,"bibclean --no-check-values --max-width 0 $fileIn|");


	# Separate the resulting file into @string entries and regular entries in
	# order to sort them separately.  Pass through bibclean one more time to put
	# in proper line breaks (which we supressed above.  For the string section,
	# use grep to eliminate the blank lines between entries.
	open2(*StringsIn, *StringsOut, "bibsort -f -u | bibclean --no-check-values --max-width 80 |grep -v \"^\$\"");
	open2(*EntriesIn, *EntriesOut, "grep -v \"^\$\" | bibsort -f -u | bibclean --no-check-values --max-width 80 ");

	while(my $line = <IN>) {
		if($line =~ /^%/) {
			# ignore comments
		} elsif($line =~ /\@String/) {
			print StringsOut $line;
		} else {
			print EntriesOut $line;
		}
	}
	close StringsOut;
	close EntriesOut;
	close IN;

	# Replace the original input file with these two parts.
	open(OUT, ">$fileOut");
	print OUT "% Cleaned up by bibfix on ". `date` . "\n";
	print OUT while(<StringsIn>);
	print OUT "\n\n";
	print OUT while(<EntriesIn>);



}

$ARGV[0] || die;
$ARGV[1] || die;
go($ARGV[0], $ARGV[1]);


